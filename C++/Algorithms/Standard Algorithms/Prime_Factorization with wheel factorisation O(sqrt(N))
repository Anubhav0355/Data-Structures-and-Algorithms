#include <bits/stdc++.h>
#define ull unsigned ll
#define ll long long int
#define ld long double
#define pb push_back
#define mp make_pair
#define mt make_tuple
#define ff first
#define ss second
#define pi 3.1415926535897932384626
#define INF 100000000000
#pragma GCC optimize("Ofast")
#pragma GCC target("avx,avx2,fma")
#pragma GCC optimization ("unroll-loops")
#define F(i,a,n) for(ll i=a;i<n;i++)
#define B(i,a,n) for(ll i=n-1;i>=a;i--)
#define tc int t;cin>>t;while(t--)
#define tcf ll t;cin>>t;for(int w=1;w<=t;w++)
#define Ans(a,b) cout<<"Case #"<<a<<": "<<b<<"\n";
#define inter(i,j) cout<<"? "<<i<<" "<<j<<endl;fflush(stdin);
#define vi vector<int>
#define vll vector<ll>
#define pii pair<int,int>
#define pll pair<ll,ll>
#define debuga(x)  cout<<"# "<<x<<"\n";
#define debugb(x,y) cout<<"# "<<x<<"  "<<y<<"\n";
using namespace std;


// factorization optimized using wheel factorization

// prime numbers after 7 follow a fix pattern of differences
// 7 11 13 17 19 23 29 31 37 | 41 43
//   4  2  4  2  4  6  2  6    4  2  4... pattern repeats

map<ll,ll>spf;
void compute(ll n)
{
    for(int d:{2,3,5})
    {
        while(n%d==0)
        {
            n/=d;
            spf[d]++;
        }
    }
    static array<int,8>incre={4,2,4,2,4,6,2,6};
    int j=0;
    for(ll i=7;i<=sqrt(n);i+incre[j++])
    {
        while(n%i==0)
        {
            n/=i;
            spf[i]++;
        }
        if(j==8)
        {
            j=0;
        }
    }
    if(n>1)
    {
        spf[n]++;
    }
}


int main()
{

    ios_base::sync_with_stdio(0); cin.tie(0); cout.tie(0);

    ll n;
    cin>>n;
    compute(n);
    for(auto i:spf)
    {
        cout<<i.ff<<" "<<i.ss<<"\n";
    }
    
    return 0;

}

// For 10^5 Block size=700


// ctrl+alt+b

